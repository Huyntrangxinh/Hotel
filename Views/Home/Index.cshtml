@{
    ViewData["Title"] = "Trang chủ";
}

<style>
    :root {
        --booking-blue-dark: #003580;
        --booking-blue-light: #006ce4;
        --booking-yellow: #febb02;
        --border-color: #ced4da;
    }

    /* Search container - copy from Search page */
    .search-container {
        background: var(--booking-blue-dark);
        padding: 10px 0 20px;
    }

    .search-box {
        max-width: 1100px;
        margin: 0 auto;
        padding: 0 15px;
        }

        .search-form {
        background: var(--booking-yellow);
        border-radius: 8px;
        padding: 4px;
        display: grid;
        grid-template-columns: 1fr auto auto 120px;
        gap: 4px;
        align-items: center;
        }

        .search-input-group {
            background: white;
        display: flex;
        align-items: center;
        padding: 0 10px;
            border-radius: 4px;
        height: 48px;
        position: relative;
    }

    .search-input-group i {
        font-size: 20px;
        color: #666;
        margin-right: 8px;
    }

    .search-input-group input,
    .search-input-group .date-display,
    .search-input-group .guests-display {
            border: none;
        outline: none;
            width: 100%;
        height: 100%;
        font-size: 14px;
        background: transparent;
        color: #333;
    }

    .date-display,
    .guests-display {
        display: flex;
        align-items: center;
        cursor: pointer;
        color: #333;
        font-weight: 500;
        }

        .search-btn {
        background: var(--booking-blue-light);
        color: white;
            border: none;
        height: 48px;
            border-radius: 4px;
        font-size: 16px;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.3s;
        }

        .search-btn:hover {
        background: #005a9b;
    }

    /* Dropdown chọn khách */
    #guestDropdown {
        top: calc(100% + 8px);
            left: 0;
        width: 350px;
        color: #333;
    }
    
    .hover-bg:hover {
        background-color: #f0f2f5;
    }
    
    /* Disable button khi ở giá trị minimum */
    .btn:disabled {
        opacity: 0.3;
        cursor: not-allowed;
    }

    /* Custom Date Picker */
    .date-picker-dropdown {
            position: absolute;
            top: 100%;
            left: 0;
            background: white;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        z-index: 1050;
        width: 600px;
        padding: 20px;
        margin-top: 4px;
    }

    .date-picker-header {
            display: flex;
        justify-content: space-between;
            align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 1px solid #e0e0e0;
    }

    .date-picker-tabs {
            display: flex;
        gap: 20px;
        margin-bottom: 20px;
    }

    .date-tab {
        padding: 8px 16px;
        border: none;
        background: none;
            cursor: pointer;
        font-size: 14px;
        color: #666;
        border-bottom: 2px solid transparent;
    }

    .date-tab.active {
        color: #006ce4;
        border-bottom-color: #006ce4;
    }

    .calendar-container {
        display: flex;
        gap: 30px;
    }

    .calendar-month {
        flex: 1;
    }

    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .calendar-nav {
        background: none;
            border: none;
        font-size: 18px;
            cursor: pointer;
        color: #666;
        padding: 5px;
    }

    .calendar-nav:hover {
        color: #006ce4;
    }

    .month-year {
        font-size: 16px;
        font-weight: 600;
        color: #333;
    }

    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 2px;
    }

    .calendar-day-header {
        text-align: center;
        padding: 8px 4px;
        font-size: 12px;
            font-weight: 600;
        color: #666;
    }

    .calendar-day {
        text-align: center;
        padding: 8px 4px;
            cursor: pointer;
        border-radius: 4px;
        font-size: 14px;
        color: #333;
        position: relative;
    }

    .calendar-day:hover {
        background-color: #f0f2f5;
    }

    .calendar-day.selected {
        background-color: #006ce4;
            color: white;
    }

    .calendar-day.in-range {
        background-color: #e3f2fd;
        color: #006ce4;
    }

    .calendar-day.disabled {
        color: #ccc;
        cursor: not-allowed;
    }

    .calendar-day.disabled:hover {
        background-color: transparent;
    }

    .date-picker-footer {
        margin-top: 20px;
        padding-top: 15px;
        border-top: 1px solid #e0e0e0;
            display: flex;
        gap: 10px;
    }

    .duration-btn {
        padding: 8px 16px;
            border: 1px solid #e0e0e0;
            background: white;
        border-radius: 4px;
            cursor: pointer;
        font-size: 14px;
        color: #333;
    }

    .duration-btn.active {
        border-color: #006ce4;
        color: #006ce4;
    }

    @@media (max-width: 992px) { 
        .search-form { 
            grid-template-columns: 1fr; 
            gap: 8px;
        }
        .search-input-group { 
            min-height: 48px;
        }
        }
    </style>

<!-- HERO + SEARCH -->
<section class="py-5" style="background:#003580; color:#fff;">
        <div class="container">
        <h1 class="fw-bold display-5 mb-2">Trang, kế tiếp bạn sẽ du lịch đến đâu?</h1>
        <p class="fs-5 mb-4">Tìm ưu đãi Genius đặc biệt tại khắp nơi trên thế giới!</p>

        <div class="search-box">
            <form class="search-form" method="get" action="/Public/Search">
                <!-- Hidden inputs for guest and room data -->
                <input type="hidden" id="adultsInput" name="adults" value="2" />
                <input type="hidden" id="childrenInput" name="children" value="0" />
                <input type="hidden" id="roomsInput" name="rooms" value="1" />
                
                <!-- Destination -->
                <div class="search-input-group position-relative">
                    <i class="bi bi-search"></i>
                    <input id="destinationInput" name="destination" placeholder="Bạn muốn đến đâu?" autocomplete="off" />
                    <div id="destinationDropdown" class="bg-white border rounded-3 shadow-sm position-absolute w-100 d-none"
                         style="z-index:1050; max-height:360px; overflow-y:auto; top:100%; left:0; margin-top: 4px;"></div>
                    </div>
                
                <!-- Date Range -->
                <div class="search-input-group position-relative">
                    <i class="bi bi-calendar3"></i>
                    <div class="date-display" id="dateDisplay">Chọn ngày</div>
                    <input name="checkin" type="date" class="form-control d-none" id="checkinInput" />
                    <input name="checkout" type="date" class="form-control d-none" id="checkoutInput" />
                    
                    <!-- Custom Date Picker Dropdown -->
                    <div id="datePickerDropdown" class="date-picker-dropdown d-none">
                        <div class="date-picker-header">
                            <div>
                                <span id="selectedDateRange">T6, 14 tháng 11 — CN, 16 tháng 11</span>
                            </div>
                            <div>
                                <span id="selectedGuests">2 người lớn • 0 trẻ em • 1 phòng</span>
                        </div>
                    </div>
                        
                        <div class="date-picker-tabs">
                            <button class="date-tab active" data-tab="calendar">Lịch</button>
                            <button class="date-tab" data-tab="flexible">Ngày linh hoạt</button>
                        </div>
                        
                        <div id="calendarTab" class="tab-content">
                            <div class="calendar-container">
                                <div class="calendar-month">
                                    <div class="calendar-header">
                                        <button class="calendar-nav" onclick="changeMonth(-1)">&lt;</button>
                                        <div class="month-year" id="month1">tháng 11 năm 2025</div>
                                        <button class="calendar-nav" onclick="changeMonth(1)">&gt;</button>
                    </div>
                                    <div class="calendar-grid" id="calendar1">
                                        <!-- Calendar will be generated by JavaScript -->
                        </div>
                    </div>
                                <div class="calendar-month">
                                    <div class="calendar-header">
                                        <button class="calendar-nav" onclick="changeMonth(1)">&lt;</button>
                                        <div class="month-year" id="month2">tháng 12 năm 2025</div>
                                        <button class="calendar-nav" onclick="changeMonth(1)">&gt;</button>
                                    </div>
                                    <div class="calendar-grid" id="calendar2">
                                        <!-- Calendar will be generated by JavaScript -->
                                </div>
                                    </div>
                                </div>
                                    </div>
                        
                        <div id="flexibleTab" class="tab-content d-none">
                            <div class="date-picker-footer">
                                <button class="duration-btn active" data-days="0">Ngày chính xác</button>
                                <button class="duration-btn" data-days="1">+ 1 ngày</button>
                                <button class="duration-btn" data-days="2">+ 2 ngày</button>
                                <button class="duration-btn" data-days="3">+ 3 ngày</button>
                                <button class="duration-btn" data-days="7">+ 7 ngày</button>
                                </div>
                                </div>
                        
                        <!-- Apply button -->
                        <div class="date-picker-apply" style="margin-top: 15px; text-align: right;">
                            <button type="button" class="btn btn-primary" onclick="closeDatePicker()" style="padding: 8px 20px; font-size: 14px;">Áp dụng</button>
                            </div>
                        </div>
                    </div>
                
                <!-- Guests & Rooms -->
                <div class="search-input-group position-relative">
                    <i class="bi bi-person"></i>
                    <div class="guests-display" id="guestText">2 người lớn · 0 trẻ em · 1 phòng</div>
                    
                    <!-- Guest Dropdown -->
                    <div id="guestDropdown" class="bg-white border rounded-3 shadow-sm position-absolute d-none"
                         style="z-index:1050; padding:16px; top:100%; left:0; margin-top: 4px;">
                        <div class="d-flex justify-content-between align-items-center py-2">
                            <div>
                                <div class="fw-semibold">Người lớn</div>
                    </div>
                            <div class="d-flex align-items-center gap-3">
                                <button type="button" class="btn btn-outline-secondary btn-sm rounded-circle" style="width:32px; height:32px;" onclick="updateGuests('adults', -1)">−</button>
                                <span id="adultsCount" class="fw-semibold">2</span>
                                <button type="button" class="btn btn-outline-secondary btn-sm rounded-circle" style="width:32px; height:32px;" onclick="updateGuests('adults', 1)">+</button>
                </div>
                </div>
                        
                                <div class="d-flex justify-content-between align-items-center py-2">
                            <div>
                                <div class="fw-semibold">Trẻ em</div>
                                <div class="small text-muted">0-17 tuổi</div>
                            </div>
                            <div class="d-flex align-items-center gap-3">
                                <button type="button" class="btn btn-outline-secondary btn-sm rounded-circle" style="width:32px; height:32px;" onclick="updateGuests('children', -1)">−</button>
                                <span id="childrenCount" class="fw-semibold">0</span>
                                <button type="button" class="btn btn-outline-secondary btn-sm rounded-circle" style="width:32px; height:32px;" onclick="updateGuests('children', 1)">+</button>
                        </div>
                    </div>
                        
                                <div class="d-flex justify-content-between align-items-center py-2">
                            <div>
                                <div class="fw-semibold">Phòng</div>
                            </div>
                            <div class="d-flex align-items-center gap-3">
                                <button type="button" class="btn btn-outline-secondary btn-sm rounded-circle" style="width:32px; height:32px;" onclick="updateGuests('rooms', -1)">−</button>
                                <span id="roomsCount" class="fw-semibold">1</span>
                                <button type="button" class="btn btn-outline-secondary btn-sm rounded-circle" style="width:32px; height:32px;" onclick="updateGuests('rooms', 1)">+</button>
                        </div>
                    </div>
                        
                        <button type="button" class="btn btn-primary w-100 mt-3" onclick="closeGuestDropdown()">Xong</button>
                            </div>
                        </div>
                
                <!-- Search Button -->
                        <button type="submit" class="search-btn">Tìm</button>
            </form>
                    </div>

        <!-- Under search extra option -->
        <div class="mt-2 d-flex align-items-center gap-2">
            <input class="form-check-input" type="checkbox" id="flightCheck">
            <label class="form-check-label" for="flightCheck">Thêm các chuyến bay vào tìm kiếm của tôi</label>
        </div>
    </section>

<!-- RECENT SEARCHES (removed as requested) -->

<!-- DEALS from DB - carousel style -->
<section class="container my-4">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h5 class="section-title mb-0">Ưu đãi</h5>
        <a asp-controller="Promo" asp-action="Index" class="btn btn-outline-primary btn-sm">Xem tất cả ưu đãi</a>
                            </div>
    <div id="dealsCarousel" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-inner">
            @{
                var discounts = (ViewBag.Discounts as IEnumerable<HotelBooking.Models.Discount>)?.ToList() ?? new List<HotelBooking.Models.Discount>();
            }
            @if (discounts.Count > 0)
            {
                for (int i = 0; i < discounts.Count; i += 3)
                {
                    var active = i == 0 ? "active" : "";
                    <div class="carousel-item @active">
                <div class="row g-3">
                            @for (int j = 0; j < 3 && (i + j) < discounts.Count; j++)
                            {
                                var item = discounts[i + j];
                    <div class="col-12 col-md-6 col-lg-4">
                                    <a href="/Promo/@item.Id" class="text-decoration-none text-reset">
                                        <div class="card h-100 shadow-sm">
                                            @if (!string.IsNullOrWhiteSpace(item.ImageUrl))
                                            {
                                                <img src="@item.ImageUrl" class="card-img-top object-fit-cover" style="height:180px;" alt="">
                                            }
                                            <div class="card-body">
                                                <h6 class="fw-bold mb-1">@item.Title</h6>
                                                <small class="text-muted">Mã: <code>@item.Code</code></small>
                            </div>
                        </div>
                                    </a>
                    </div>
                            }
                            </div>
                        </div>
                }
            }
            else
            {
                <div class="carousel-item active">
                    <div class="text-muted p-4">Chưa có ưu đãi.</div>
                    </div>
            }
                            </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#dealsCarousel" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#dealsCarousel" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
                        </div>
    </section>

<!-- FEATURED -->
<section class="container my-4">
    <h5 class="section-title mb-3">Lưu trú độc đáo hàng đầu</h5>
                <div class="row g-3">
        <div class="col-12 col-md-6 col-lg-4">
            <div class="card h-100 shadow-sm">
                <img src="~/img/nb.jpg" class="card-img-top object-fit-cover" style="height:220px;" alt="">
                <div class="card-body">
                                <h6 class="fw-bold mb-1">Ninh Bình</h6>
                    <small class="text-muted">Phong cảnh thiên nhiên</small>
                            </div>
                        </div>
                    </div>
        <div class="col-12 col-md-6 col-lg-4">
            <div class="card h-100 shadow-sm">
                <img src="~/img/dn.jpg" class="card-img-top object-fit-cover" style="height:220px;" alt="">
                <div class="card-body">
                    <h6 class="fw-bold mb-1">Đà Nẵng</h6>
                    <small class="text-muted">Biển & ẩm thực</small>
                            </div>
                        </div>
                    </div>
        <div class="col-12 col-md-6 col-lg-4">
            <div class="card h-100 shadow-sm">
                <img src="~/img/dl.jpg" class="card-img-top object-fit-cover" style="height:220px;" alt="">
                <div class="card-body">
                    <h6 class="fw-bold mb-1">Đà Lạt</h6>
                    <small class="text-muted">Không khí se lạnh</small>
                            </div>
                        </div>
                    </div>
                            </div>
    </section>

@section Scripts {
    <script>
        // Mapping ảnh mặc định cho một số địa danh phổ biến
        // ---- Recent search dropdown + storage ----
        const dd = document.getElementById('destinationDropdown');
        const destInput = document.getElementById('destinationInput');
        const recentKey = 'hb_recent_searches';

        function getRecent() {
            try { return JSON.parse(localStorage.getItem(recentKey) || '[]'); } catch { return []; }
        }

        function setRecent(items) {
            localStorage.setItem(recentKey, JSON.stringify(items.slice(0, 5)));
        }

        function renderDropdown() {
            const items = getRecent();
            const trending = [
                { city: 'Hà Nội', country: 'Việt Nam' },
                { city: 'Ninh Bình', country: 'Việt Nam' },
                { city: 'Sa Pa', country: 'Việt Nam' },
                { city: 'Đà Nẵng', country: 'Việt Nam' },
                { city: 'Hạ Long', country: 'Việt Nam' }
            ];

            let html = '';
            if (items.length > 0) {
                html += '<div class="p-3 border-bottom text-dark"><strong>Tìm kiếm gần đây của bạn</strong></div>';
                items.forEach((x, i) => {
                    html += `
                                                                <div class="px-3 py-2 d-flex align-items-center gap-2 hover-bg" style="cursor:pointer" data-city="${x.city}" data-checkin="${x.checkin || ''}" data-checkout="${x.checkout || ''}">
                                                                    <i class="bi bi-arrow-counterclockwise"></i>
                                                                    <div>
                                                                        <div class="fw-semibold text-dark">${x.city}</div>
                                                                        <small class="text-muted">${x.checkin || ''}${x.checkout ? ' – ' + x.checkout : ''}${x.guests ? ', ' + x.guests : ''}</small>
                        </div>
                                                                </div>`;
                });
                html += '<div class="border-top"></div>';
            }
            html += '<div class="p-3 text-dark"><strong>Các điểm đến thịnh hành</strong></div>';
            trending.forEach(t => {
                html += `
                                                            <div class="px-3 py-2 d-flex align-items-center gap-2 hover-bg" style="cursor:pointer" data-city="${t.city}">
                                                                <i class="bi bi-geo-alt"></i>
                                                                <div><div class="fw-semibold text-dark">${t.city}</div><small class="text-muted">${t.country}</small></div>
                                                            </div>`;
            });

            dd.innerHTML = html;
            dd.classList.remove('d-none');

            dd.querySelectorAll('[data-city]')?.forEach(el => {
                el.addEventListener('click', () => {
                    destInput.value = el.getAttribute('data-city') || '';
                    dd.classList.add('d-none');
                });
            });
        }

        destInput?.addEventListener('focus', renderDropdown);
        document.addEventListener('click', (e) => {
            if (!dd.contains(e.target) && e.target !== destInput) dd.classList.add('d-none');
        });

        // ---- Save search on form submit ----
        document.querySelector('form[action="/Public/Search"]')?.addEventListener('submit', (e) => {
            const city = (destInput?.value || '').trim();
            const ci = document.querySelector('input[name="checkin"]')?.value;
            const co = document.querySelector('input[name="checkout"]')?.value;
            if (!city) {
                e.preventDefault();
                alert('Vui lòng nhập điểm đến');
                return;
            }
            const items = getRecent();
            // de-duplicate by city+dates
            const key = `${city}|${ci || ''}|${co || ''}`;
            const filtered = items.filter(x => `${x.city}|${x.checkin || ''}|${x.checkout || ''}` !== key);
            filtered.unshift({ city, checkin: ci, checkout: co });
            setRecent(filtered);
            renderRecentSection();
        });

        // ---- Render RECENT section ----
        function renderRecentSection() {
            const wrap = document.getElementById('recentSearchList');
            if (!wrap) return;
            const items = getRecent();
            if (items.length === 0) { wrap.innerHTML = '<div class="text-muted">Chưa có tìm kiếm gần đây</div>'; return; }
            function cityImage(city) {
                const key = (city || '')
                    .toLowerCase()
                    .normalize('NFD')
                    // Remove Vietnamese diacritics (cross-browser)
                    .replace(/[\u0300-\u036f]/g, '')
                    .trim();

                // Fallback defaults
                // Use normalized keys so it works regardless of accents/case from user input
                const map = {
                    'ha noi': 'https://images.unsplash.com/photo-1544989164-31dc3c645987?q=80&w=1200&auto=format&fit=crop',
                    'ninh binh': 'https://images.unsplash.com/photo-1518544801976-3e16060b5b77?q=80&w=1200&auto=format&fit=crop',
                    'sa pa': 'https://images.unsplash.com/photo-1550038026-6e0a1b1b5d4a?q=80&w=1200&auto=format&fit=crop',
                    'da nang': 'https://images.unsplash.com/photo-1543796079-94b4e9b15dfb?q=80&w=1200&auto=format&fit=crop',
                    'ha long': 'https://nhandan.vn/special/30-nam-mot-chang-duong-di-san-Vinh-Ha-Long/assets/HLCklusX0n/things-to-do-in-ha-long-bay-banner-1-1920x1080.jpg',
                    'thai nguyen': 'https://images.unsplash.com/photo-1507525428034-b723cf961d3e?q=80&w=1200&auto=format&fit=crop',
                    'quang ninh': 'https://images.unsplash.com/photo-1512453979798-5ea266f8880c?q=80&w=1200&auto=format&fit=crop'
                };

                return map[key] || 'https://images.unsplash.com/photo-1507525428034-b723cf961d3e?q=80&w=1200&auto=format&fit=crop';
            }

            wrap.innerHTML = items.map(x => `
                                                        <div class="col-12 col-md-6 col-lg-4">
                                                            <div class="card shadow-sm h-100">
                                                                <div class="row g-0">
                                                                    <div class="col-4">
                                                                        <img src="${cityImage(x.city)}" class="img-fluid rounded-start object-fit-cover" style="height:100%;width:100%;" alt="">
                </div>
                                                                    <div class="col-8">
                                                                        <div class="card-body">
                                                                            <h6 class="fw-bold mb-1">${x.city}</h6>
                                                                            <small class="text-muted">${x.checkin || ''}${x.checkout ? ' – ' + x.checkout : ''}</small>
                        </div>
                    </div>
                        </div>
                    </div>
                                                        </div>`).join('');
        }

        renderRecentSection();
    </script>
}

        const ci = document.querySelector('input[name="checkin"]');
        const co = document.querySelector('input[name="checkout"]');
        const today = new Date(); const two = new Date(Date.now() + 2*86400000);
        const fmt = d => d.toISOString().slice(0,10);
        if (ci && !ci.value) ci.value = fmt(today);
        if (co && !co.value) co.value = fmt(two);
    </script>

    <script>
        // Guest counts
        let guests = {
            adults: 2,
            children: 0,
            rooms: 1
        };
        
        // Toggle guest dropdown
        const guestText = document.getElementById('guestText');
        const guestDropdown = document.getElementById('guestDropdown');
        
        if (guestText && guestDropdown) {
            guestText.addEventListener('click', (e) => {
                e.preventDefault();
                guestDropdown.classList.toggle('d-none');
            });
        }
        
        // Close guest dropdown
        function closeGuestDropdown() {
            if (guestDropdown) {
                guestDropdown.classList.add('d-none');
            }
        }
        
        // Update guests
        function updateGuests(type, change) {
            if (type === 'adults') {
                guests.adults = Math.max(1, guests.adults + change);
                const adultsCount = document.getElementById('adultsCount');
                if (adultsCount) adultsCount.textContent = guests.adults;
            } else if (type === 'children') {
                guests.children = Math.max(0, guests.children + change);
                const childrenCount = document.getElementById('childrenCount');
                if (childrenCount) childrenCount.textContent = guests.children;
            } else if (type === 'rooms') {
                guests.rooms = Math.max(1, guests.rooms + change);
                const roomsCount = document.getElementById('roomsCount');
                if (roomsCount) roomsCount.textContent = guests.rooms;
            }

                // Update button states
                updateButtonStates();
            updateGuestText();
        }
        
        // Update button states
        function updateButtonStates() {
            // Adults buttons
            const adultsMinusBtn = document.querySelector('button[onclick="updateGuests(\'adults\', -1)"]');
            if (adultsMinusBtn) adultsMinusBtn.disabled = guests.adults <= 1;
            
            // Children buttons
            const childrenMinusBtn = document.querySelector('button[onclick="updateGuests(\'children\', -1)"]');
            if (childrenMinusBtn) childrenMinusBtn.disabled = guests.children <= 0;
            
            // Rooms buttons
            const roomsMinusBtn = document.querySelector('button[onclick="updateGuests(\'rooms\', -1)"]');
            if (roomsMinusBtn) roomsMinusBtn.disabled = guests.rooms <= 1;
        }
        
        // Update guest text
        function updateGuestText() {
            const text = `${guests.adults} người lớn · ${guests.children} trẻ em · ${guests.rooms} phòng`;
            const guestText = document.getElementById('guestText');
            if (guestText) guestText.textContent = text;
            
            // Update hidden inputs for form submission
            const adultsInput = document.getElementById('adultsInput');
            const childrenInput = document.getElementById('childrenInput');
            const roomsInput = document.getElementById('roomsInput');
            
            if (adultsInput) adultsInput.value = guests.adults;
            if (childrenInput) childrenInput.value = guests.children;
            if (roomsInput) roomsInput.value = guests.rooms;
        }
        
        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
            if (guestText && guestDropdown && !guestText.contains(e.target) && !guestDropdown.contains(e.target)) {
                guestDropdown.classList.add('d-none');
            }
        });
        
        // Set default dates
        const checkinDate = document.querySelector('input[name="checkin"]');
        const checkoutDate = document.querySelector('input[name="checkout"]');
        const dateDisplay = document.getElementById('dateDisplay');
        
        if (checkinDate && checkoutDate) {
            const today = new Date();
            const tomorrow = new Date(today);
            tomorrow.setDate(tomorrow.getDate() + 1);
            
            const formatDate = (date) => {
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            };
            
            const formatDisplayDate = (date) => {
                const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                return `${days[date.getDay()]}, ${date.getDate()} ${months[date.getMonth()]}`;
            };
            
            checkinDate.value = formatDate(today);
            checkoutDate.value = formatDate(tomorrow);
            
            if (dateDisplay) {
                dateDisplay.textContent = `${formatDisplayDate(today)} – ${formatDisplayDate(tomorrow)}`;
            }
            
            // Add click event to date display
            if (dateDisplay) {
                dateDisplay.addEventListener('click', () => {
                    // Show custom date picker
                    const datePickerDropdown = document.getElementById('datePickerDropdown');
                    if (datePickerDropdown) {
                        datePickerDropdown.classList.toggle('d-none');
                        if (!datePickerDropdown.classList.contains('d-none')) {
                            generateCalendar();
                        }
                    }
                });
            }
            
            // Update display when dates change
            checkinDate.addEventListener('change', updateDateDisplay);
            checkoutDate.addEventListener('change', updateDateDisplay);
            
            function updateDateDisplay() {
                if (checkinDate.value && checkoutDate.value && dateDisplay) {
                    const checkin = new Date(checkinDate.value);
                    const checkout = new Date(checkoutDate.value);
                    dateDisplay.textContent = `${formatDisplayDate(checkin)} – ${formatDisplayDate(checkout)}`;
                }
            }
        }
        
        // Initialize button states
        updateButtonStates();

        // Date picker variables
        let currentMonth = new Date().getMonth();
        let currentYear = new Date().getFullYear();
        let selectedCheckin = null;
        let selectedCheckout = null;

        // Generate calendar
        function generateCalendar() {
            const month1 = new Date(currentYear, currentMonth, 1);
            const month2 = new Date(currentYear, currentMonth + 1, 1);
            
            document.getElementById('month1').textContent = `tháng ${month1.getMonth() + 1} năm ${month1.getFullYear()}`;
            document.getElementById('month2').textContent = `tháng ${month2.getMonth() + 1} năm ${month2.getFullYear()}`;
            
            generateMonthCalendar('calendar1', month1);
            generateMonthCalendar('calendar2', month2);
        }

        // Generate single month calendar
        function generateMonthCalendar(containerId, date) {
            const container = document.getElementById(containerId);
            const year = date.getFullYear();
            const month = date.getMonth();
            
            // Day headers
            const dayHeaders = ['T2', 'T3', 'T4', 'T5', 'T6', 'T7', 'CN'];
            let html = '';
            
            dayHeaders.forEach(day => {
                html += `<div class="calendar-day-header">${day}</div>`;
            });
            
            // Get first day of month and number of days
            const firstDay = new Date(year, month, 1).getDay();
            const daysInMonth = new Date(year, month + 1, 0).getDate();
            
            // Add empty cells for days before month starts
            for (let i = 0; i < firstDay; i++) {
                html += `<div class="calendar-day"></div>`;
            }
            
            // Add days of month
            for (let day = 1; day <= daysInMonth; day++) {
                const dayDate = new Date(year, month, day);
                const isToday = isSameDay(dayDate, new Date());
                const isSelected = (selectedCheckin && isSameDay(dayDate, selectedCheckin)) || 
                                 (selectedCheckout && isSameDay(dayDate, selectedCheckout));
                const isInRange = selectedCheckin && selectedCheckout && 
                                dayDate > selectedCheckin && dayDate < selectedCheckout;
                const isDisabled = dayDate < new Date();
                
                let classes = 'calendar-day';
                if (isSelected) classes += ' selected';
                if (isInRange) classes += ' in-range';
                if (isDisabled) classes += ' disabled';
                
                html += `<div class="${classes}" data-date="${formatDate(dayDate)}" onclick="selectDate('${formatDate(dayDate)}')">${day}</div>`;
            }
            
            container.innerHTML = html;
        }

        // Select date
        function selectDate(dateString) {
            const date = new Date(dateString);
            if (date < new Date()) return; // Can't select past dates
            
            if (!selectedCheckin || (selectedCheckin && selectedCheckout)) {
                // Start new selection
                selectedCheckin = date;
                selectedCheckout = null;
                
                // Update display for first selection
                updateSelectedDateRange();
            } else if (selectedCheckin && !selectedCheckout) {
                // Complete selection
                if (date > selectedCheckin) {
                    selectedCheckout = date;
                } else {
                    selectedCheckout = selectedCheckin;
                    selectedCheckin = date;
                }
                
                // Update hidden inputs
                document.getElementById('checkinInput').value = formatDate(selectedCheckin);
                document.getElementById('checkoutInput').value = formatDate(selectedCheckout);

                // Update display
                updateDateDisplay();
                updateSelectedDateRange();
                
                // Don't close dropdown automatically - let user choose flexible options
            }
            
            generateCalendar(); // Regenerate to show selection
        }

        // Change month
        function changeMonth(direction) {
            currentMonth += direction;
            if (currentMonth < 0) {
                currentMonth = 11;
                currentYear--;
            } else if (currentMonth > 11) {
                currentMonth = 0;
                currentYear++;
            }
            generateCalendar();
        }

        // Update selected date range display
        function updateSelectedDateRange() {
            const formatDisplayDate = (date) => {
                const days = ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
                const months = ['tháng 1', 'tháng 2', 'tháng 3', 'tháng 4', 'tháng 5', 'tháng 6', 
                              'tháng 7', 'tháng 8', 'tháng 9', 'tháng 10', 'tháng 11', 'tháng 12'];
                return `${days[date.getDay()]}, ${date.getDate()} ${months[date.getMonth()]}`;
            };
            
            if (selectedCheckin && selectedCheckout) {
                const rangeText = `${formatDisplayDate(selectedCheckin)} — ${formatDisplayDate(selectedCheckout)}`;
                document.getElementById('selectedDateRange').textContent = rangeText;
            } else if (selectedCheckin) {
                const rangeText = `${formatDisplayDate(selectedCheckin)} — Chọn ngày về`;
                document.getElementById('selectedDateRange').textContent = rangeText;
            }
        }

        // Helper functions
        function isSameDay(date1, date2) {
            return date1.getDate() === date2.getDate() &&
                   date1.getMonth() === date2.getMonth() &&
                   date1.getFullYear() === date2.getFullYear();
        }

        function formatDate(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        // Close date picker
        function closeDatePicker() {
            document.getElementById('datePickerDropdown').classList.add('d-none');
        }

        // Tab switching
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('date-tab')) {
                // Remove active class from all tabs
                document.querySelectorAll('.date-tab').forEach(tab => tab.classList.remove('active'));
                // Add active class to clicked tab
                e.target.classList.add('active');
                
                // Show/hide tab content
                const tabType = e.target.getAttribute('data-tab');
                document.getElementById('calendarTab').classList.toggle('d-none', tabType !== 'calendar');
                document.getElementById('flexibleTab').classList.toggle('d-none', tabType !== 'flexible');
            }
            
            // Handle flexible date options
            if (e.target.classList.contains('duration-btn')) {
                // Remove active class from all duration buttons
                document.querySelectorAll('.duration-btn').forEach(btn => btn.classList.remove('active'));
                // Add active class to clicked button
                e.target.classList.add('active');
                
                const days = parseInt(e.target.getAttribute('data-days'));
                if (days > 0 && selectedCheckin && selectedCheckout) {
                    // Adjust checkout date based on flexible option
                    const newCheckout = new Date(selectedCheckin);
                    newCheckout.setDate(newCheckout.getDate() + days);
                    
                    selectedCheckout = newCheckout;
                    
                    // Update hidden inputs
                    document.getElementById('checkinInput').value = formatDate(selectedCheckin);
                    document.getElementById('checkoutInput').value = formatDate(selectedCheckout);
                    
                    // Update display
                    updateDateDisplay();
                    updateSelectedDateRange();
                    generateCalendar();
                }
            }
            
            // Close date picker when clicking outside
            const datePickerDropdown = document.getElementById('datePickerDropdown');
            const dateDisplay = document.getElementById('dateDisplay');
            if (datePickerDropdown && !datePickerDropdown.contains(e.target) && !dateDisplay.contains(e.target)) {
                datePickerDropdown.classList.add('d-none');
            }
        });
        
        // Form submission
        const searchForm = document.querySelector('form[action="/Public/Search"]');
        if (searchForm) {
            searchForm.addEventListener('submit', (e) => {
                const destination = document.getElementById('destinationInput')?.value || '';
                const checkin = checkinDate?.value || '';
                const checkout = checkoutDate?.value || '';
                
                if (!destination) {
                    e.preventDefault();
                    alert('Vui lòng nhập điểm đến');
                    return;
                }
                
                // Save to recent searches
                const recentSearches = JSON.parse(localStorage.getItem('recentSearches') || '[]');
                const newSearch = {
                    destination,
                    checkin,
                    checkout,
                    guests: `${guests.adults} người lớn, ${guests.children} trẻ em, ${guests.rooms} phòng`
                };
                
                // Add to beginning and limit to 5 items
                recentSearches.unshift(newSearch);
                if (recentSearches.length > 5) {
                    recentSearches.pop();
                }
                
                localStorage.setItem('recentSearches', JSON.stringify(recentSearches));
            });
        }
    </script>
}