@model List<HotelBooking.Models.Room>
@{
    ViewData["Title"] = "Lịch giá & Phòng trống";
    var propertyId = (int)ViewBag.PropertyId;
    var year = (int)ViewBag.Year;
    var month = (int)ViewBag.Month;
    var propertyName = (string?)ViewBag.PropertyName ?? "";
}

<div class="container-fluid py-4">
    <!-- Toolbar -->
    <div class="calendar-toolbar mb-3">
        <div class="left">
            <div class="title">@propertyName</div>
            <div class="subtitle">Lịch • tháng @month/@year</div>
        </div>
        <div class="center">
            <button id="btnPrev" class="btn btn-outline-primary btn-sm"><i class="bi bi-chevron-left"></i></button>
            <div class="range-pill">16 tháng @month, @year – 15 tháng @(month==12?1:month+1)</div>
            <button id="btnNext" class="btn btn-outline-primary btn-sm"><i class="bi bi-chevron-right"></i></button>
        </div>
        <div class="right">
            <a class="btn btn-outline-secondary btn-sm"
               href="@Url.Action("PropertyData", "Partner", new { propertyId = propertyId, tab = "pricing" })">
                <i class="bi bi-arrow-left me-1"></i> Quay lại
            </a>
            <button class="btn btn-outline-secondary btn-sm"><i class="bi bi-gear me-1"></i> Cài đặt tình trạng trống</button>
            <button id="btnSave" class="btn btn-primary btn-sm"><i class="bi bi-save me-1"></i> Lưu thay đổi</button>
        </div>
    </div>

    <div class="calendar-wrapper">
        <div class="calendar-grid" id="calendarGrid"></div>
    </div>
</div>

<style>
    .calendar-wrapper {
        overflow-x: auto;
        background: #fff;
        border: 1px solid #e9ecef;
        border-radius: 8px;
    }

    .calendar-grid {
        display: grid;
        grid-auto-rows: minmax(48px, auto);
    }

    .calendar-grid .header {
        position: sticky;
        top: 0;
        background: #f8f9fa;
        z-index: 2;
        border-bottom: 1px solid #e9ecef;
    }

    .room-cell {
        background: #f8f9fa;
        padding: 8px 10px;
        border-right: 1px solid #e9ecef;
        white-space: nowrap;
    }

    .day-cell {
        border-left: 1px solid #f1f3f5;
        border-bottom: 1px solid #f1f3f5;
        padding: 6px;
        min-width: 92px;
    }

    .day-cell input {
        width: 100%;
        font-size: 12px;
        padding: 4px 6px;
    }

    .closed {
        background: #ffeaea;
    }

    .controls {
        display: flex;
        gap: 6px;
        margin-top: 4px;
    }

    .controls .form-check {
        font-size: 12px;
    }

    .calendar-toolbar {
        display: grid; grid-template-columns: 1fr auto 1fr; align-items: center; gap: 8px;
    }
    .calendar-toolbar .left .title { font-weight: 700; font-size: 18px; }
    .calendar-toolbar .left .subtitle { color:#6c757d; font-size: 12px; }
    .calendar-toolbar .center { display:flex; align-items:center; gap:8px; justify-content:center; }
    .range-pill { background:#f1f3f5; padding:6px 10px; border-radius:999px; font-size:12px; color:#495057; }
    .calendar-toolbar .right { display:flex; gap:8px; justify-content:flex-end; }
</style>

<script>
    const propertyId = @propertyId;
    let currentYear = @year;
    let currentMonth = @month; // 1-12
    let rooms = [];
    const changes = new Map(); // key: roomId|date -> data

    async function loadMonth(y, m) {
        const res = await fetch(`@Url.Action("FetchMonth", "Partner")?propertyId=${propertyId}&year=${y}&month=${m}`);
        const data = await res.json();
        rooms = data.rooms;
        renderCalendar(y, m, data);
    }

    function dateKey(d) { return d.toISOString().slice(0, 10); }

    function renderCalendar(y, m, data) {
        const start = new Date(y, m - 1, 1);
        const daysInMonth = new Date(y, m, 0).getDate();
        const grid = document.getElementById('calendarGrid');
        const cols = 1 + daysInMonth; // first column is room name
        grid.style.gridTemplateColumns = `240px repeat(${daysInMonth}, 1fr)`;
        grid.innerHTML = '';

        // Header (weekday + date like Booking matrix)
        const weekdays = ['CN','T2','T3','T4','T5','T6','T7'];
        grid.appendChild(cell('header room-cell fw-semibold', 'Phòng'));
        for (let d = 1; d <= daysInMonth; d++) {
            const dt = new Date(y, m - 1, d);
            const wd = dt.getDay();
            const label = `<div class='small text-muted'>${weekdays[wd]}</div><div>${String(d).padStart(2,'0')}/${m}</div>`;
            const el = cell('header day-cell text-center', label);
            if (wd === 0 || wd === 6) el.style.background = '#eef6ff';
            grid.appendChild(el);
        }

        // Availability row (editable number per day)
        grid.appendChild(cell('room-cell', '<div class="small text-muted">Trạng thái phòng</div><div class="fw-semibold">Đặt được</div>'));
        for (let d = 1; d <= daysInMonth; d++) {
            const wrap = document.createElement('div');
            wrap.className = 'day-cell';
            const qty = document.createElement('input');
            qty.type = 'number'; qty.min = '0'; qty.className='form-control form-control-sm'; qty.value = 1;
            wrap.appendChild(qty);
            grid.appendChild(wrap);
        }

        // Rates map
        const rateMap = new Map();
        for (const r of data.rates) {
            rateMap.set(`${r.roomId}|${r.date.substring(0, 10)}`, r);
        }

        for (const room of rooms) {
            grid.appendChild(cell('room-cell', room.name));
            for (let d = 1; d <= daysInMonth; d++) {
                const cur = new Date(y, m - 1, d);
                const key = `${room.id}|${cur.toISOString().slice(0, 10)}`;
                const r = rateMap.get(key);
                const wrap = document.createElement('div');
                wrap.className = 'day-cell';

                const priceInput = document.createElement('input');
                priceInput.type = 'text';
                priceInput.inputMode = 'numeric';
                const base = data.basePrices[room.id] || '';
                priceInput.placeholder = base ? formatVnd(base) : 'Giá';
                priceInput.value = r?.price ? formatVnd(r.price) : '';
                priceInput.addEventListener('input', () => {
                    const num = parseNumeric(priceInput.value);
                    priceInput.value = num ? formatVnd(num) : '';
                });
                priceInput.addEventListener('change', () => {
                    const num = parseNumeric(priceInput.value);
                    collectChange(room.id, cur, { price: Number.isFinite(num) ? Number(num) : null });
                });

                const check = document.createElement('input');
                check.type = 'checkbox';
                check.className = 'form-check-input ms-1';
                check.checked = r?.isClosed ?? false;
                check.title = 'Đóng bán';
                check.addEventListener('change', () => {
                    wrap.classList.toggle('closed', check.checked);
                    collectChange(room.id, cur, { isClosed: check.checked });
                });

                const ctl = document.createElement('div');
                ctl.className = 'controls';
                const lbl = document.createElement('label');
                lbl.className = 'form-check-label small';
                lbl.textContent = 'Đóng';
                const group = document.createElement('div');
                group.className = 'form-check form-check-inline';
                group.appendChild(check);
                group.appendChild(lbl);

                wrap.appendChild(priceInput);
                wrap.appendChild(group);
                if (check.checked) wrap.classList.add('closed');
                grid.appendChild(wrap);
            }
        }
    }

    function cell(cls, html) { const d = document.createElement('div'); d.className = cls; d.innerHTML = html; return d; }

    function collectChange(roomId, date, delta) {
        const k = `${roomId}|${dateKey(date)}`;
        const current = changes.get(k) || { roomId, date: dateKey(date) };
        Object.assign(current, delta);
        changes.set(k, current);
    }

    function parseNumeric(text) {
        if (!text) return 0;
        const raw = String(text).replace(/[^0-9]/g, '');
        return raw === '' ? 0 : Number(raw);
    }

    function formatVnd(n) {
        try {
            const num = typeof n === 'number' ? n : Number(n);
            if (!Number.isFinite(num)) return '';
            return num.toLocaleString('vi-VN');
        } catch { return ''; }
    }

    document.getElementById('btnPrev').addEventListener('click', () => {
        currentMonth--; if (currentMonth === 0) { currentMonth = 12; currentYear--; }
        loadMonth(currentYear, currentMonth);
    });
    document.getElementById('btnNext').addEventListener('click', () => {
        currentMonth++; if (currentMonth === 13) { currentMonth = 1; currentYear++; }
        loadMonth(currentYear, currentMonth);
    });
    document.getElementById('btnSave').addEventListener('click', async () => {
        if (changes.size === 0) { alert('Không có thay đổi'); return; }
        const payload = {
            propertyId: propertyId,
            items: Array.from(changes.values()).map(x => ({
                roomId: x.roomId,
                date: x.date,
                price: x.price ?? null,
                isClosed: x.isClosed ?? null
            }))
        };
        const res = await fetch('@Url.Action("SaveRates", "Partner")', {
            method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload)
        });
        if (res.ok) { changes.clear(); alert('Đã lưu'); loadMonth(currentYear, currentMonth); }
        else { alert('Lỗi lưu'); }
    });

    loadMonth(currentYear, currentMonth);
</script>
